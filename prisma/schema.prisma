// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String       @unique //new
  role          Role         @default(CLIENT) //new
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]

  @@map("user")
}

model Product {
  id                     String   @id @default(uuid())
  name                   String
  priceInCents           Int
  imagePath              String
  stock                  Int // Quantité disponible
  unit                   Unit // Unité de mesure
  description            String
  isAvailableForPurchase Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  orders Order[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  quantity         Int      @default(1)

  // Stripe fields
  stripePaymentIntentId String?     @unique
  stripeSessionId       String?     @unique
  status                OrderStatus @default(PENDING)

  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

enum Role {
  CLIENT
  ADMIN
}

enum Unit {
  PIECE
  KG
  GRAM
  LITER
  ML
  BUNCH
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
